# coding: utf-8

"""
    ProWritingAid API V2

    Official ProWritingAid API Version 2

    OpenAPI spec version: v2
    Contact: hello@prowritingaid.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class AnalysisSummarySubItem(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'tag_ids': 'list[str]',
        'text': 'str',
        'suggestion_category': 'str',
        'sub_category': 'str',
        'search_term': 'str'
    }

    attribute_map = {
        'tag_ids': 'TagIds',
        'text': 'Text',
        'suggestion_category': 'SuggestionCategory',
        'sub_category': 'SubCategory',
        'search_term': 'SearchTerm'
    }

    def __init__(self, tag_ids=None, text=None, suggestion_category=None, sub_category=None, search_term=None):
        """
        AnalysisSummarySubItem - a model defined in Swagger
        """

        self._tag_ids = None
        self._text = None
        self._suggestion_category = None
        self._sub_category = None
        self._search_term = None

        if tag_ids is not None:
          self.tag_ids = tag_ids
        if text is not None:
          self.text = text
        if suggestion_category is not None:
          self.suggestion_category = suggestion_category
        if sub_category is not None:
          self.sub_category = sub_category
        if search_term is not None:
          self.search_term = search_term

    @property
    def tag_ids(self):
        """
        Gets the tag_ids of this AnalysisSummarySubItem.

        :return: The tag_ids of this AnalysisSummarySubItem.
        :rtype: list[str]
        """
        return self._tag_ids

    @tag_ids.setter
    def tag_ids(self, tag_ids):
        """
        Sets the tag_ids of this AnalysisSummarySubItem.

        :param tag_ids: The tag_ids of this AnalysisSummarySubItem.
        :type: list[str]
        """

        self._tag_ids = tag_ids

    @property
    def text(self):
        """
        Gets the text of this AnalysisSummarySubItem.

        :return: The text of this AnalysisSummarySubItem.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """
        Sets the text of this AnalysisSummarySubItem.

        :param text: The text of this AnalysisSummarySubItem.
        :type: str
        """

        self._text = text

    @property
    def suggestion_category(self):
        """
        Gets the suggestion_category of this AnalysisSummarySubItem.

        :return: The suggestion_category of this AnalysisSummarySubItem.
        :rtype: str
        """
        return self._suggestion_category

    @suggestion_category.setter
    def suggestion_category(self, suggestion_category):
        """
        Sets the suggestion_category of this AnalysisSummarySubItem.

        :param suggestion_category: The suggestion_category of this AnalysisSummarySubItem.
        :type: str
        """

        self._suggestion_category = suggestion_category

    @property
    def sub_category(self):
        """
        Gets the sub_category of this AnalysisSummarySubItem.

        :return: The sub_category of this AnalysisSummarySubItem.
        :rtype: str
        """
        return self._sub_category

    @sub_category.setter
    def sub_category(self, sub_category):
        """
        Sets the sub_category of this AnalysisSummarySubItem.

        :param sub_category: The sub_category of this AnalysisSummarySubItem.
        :type: str
        """

        self._sub_category = sub_category

    @property
    def search_term(self):
        """
        Gets the search_term of this AnalysisSummarySubItem.

        :return: The search_term of this AnalysisSummarySubItem.
        :rtype: str
        """
        return self._search_term

    @search_term.setter
    def search_term(self, search_term):
        """
        Sets the search_term of this AnalysisSummarySubItem.

        :param search_term: The search_term of this AnalysisSummarySubItem.
        :type: str
        """

        self._search_term = search_term

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, AnalysisSummarySubItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
