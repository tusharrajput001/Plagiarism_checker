# coding: utf-8

"""
    ProWritingAid API V2

    Official ProWritingAid API Version 2

    OpenAPI spec version: v2
    Contact: hello@prowritingaid.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class AnalysisSummary(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'report_display_name': 'str',
        'report_name': 'str',
        'summary_items': 'list[AnalysisSummaryItem]',
        'number_of_issues': 'int',
        'report_description': 'str'
    }

    attribute_map = {
        'report_display_name': 'ReportDisplayName',
        'report_name': 'ReportName',
        'summary_items': 'SummaryItems',
        'number_of_issues': 'NumberOfIssues',
        'report_description': 'ReportDescription'
    }

    def __init__(self, report_display_name=None, report_name=None, summary_items=None, number_of_issues=None, report_description=None):
        """
        AnalysisSummary - a model defined in Swagger
        """

        self._report_display_name = None
        self._report_name = None
        self._summary_items = None
        self._number_of_issues = None
        self._report_description = None

        if report_display_name is not None:
          self.report_display_name = report_display_name
        if report_name is not None:
          self.report_name = report_name
        if summary_items is not None:
          self.summary_items = summary_items
        if number_of_issues is not None:
          self.number_of_issues = number_of_issues
        if report_description is not None:
          self.report_description = report_description

    @property
    def report_display_name(self):
        """
        Gets the report_display_name of this AnalysisSummary.
        Report's display name

        :return: The report_display_name of this AnalysisSummary.
        :rtype: str
        """
        return self._report_display_name

    @report_display_name.setter
    def report_display_name(self, report_display_name):
        """
        Sets the report_display_name of this AnalysisSummary.
        Report's display name

        :param report_display_name: The report_display_name of this AnalysisSummary.
        :type: str
        """

        self._report_display_name = report_display_name

    @property
    def report_name(self):
        """
        Gets the report_name of this AnalysisSummary.
        Report's ID

        :return: The report_name of this AnalysisSummary.
        :rtype: str
        """
        return self._report_name

    @report_name.setter
    def report_name(self, report_name):
        """
        Sets the report_name of this AnalysisSummary.
        Report's ID

        :param report_name: The report_name of this AnalysisSummary.
        :type: str
        """

        self._report_name = report_name

    @property
    def summary_items(self):
        """
        Gets the summary_items of this AnalysisSummary.
        Found issues

        :return: The summary_items of this AnalysisSummary.
        :rtype: list[AnalysisSummaryItem]
        """
        return self._summary_items

    @summary_items.setter
    def summary_items(self, summary_items):
        """
        Sets the summary_items of this AnalysisSummary.
        Found issues

        :param summary_items: The summary_items of this AnalysisSummary.
        :type: list[AnalysisSummaryItem]
        """

        self._summary_items = summary_items

    @property
    def number_of_issues(self):
        """
        Gets the number_of_issues of this AnalysisSummary.
        Number of found issues

        :return: The number_of_issues of this AnalysisSummary.
        :rtype: int
        """
        return self._number_of_issues

    @number_of_issues.setter
    def number_of_issues(self, number_of_issues):
        """
        Sets the number_of_issues of this AnalysisSummary.
        Number of found issues

        :param number_of_issues: The number_of_issues of this AnalysisSummary.
        :type: int
        """

        self._number_of_issues = number_of_issues

    @property
    def report_description(self):
        """
        Gets the report_description of this AnalysisSummary.
        Short report description

        :return: The report_description of this AnalysisSummary.
        :rtype: str
        """
        return self._report_description

    @report_description.setter
    def report_description(self, report_description):
        """
        Sets the report_description of this AnalysisSummary.
        Short report description

        :param report_description: The report_description of this AnalysisSummary.
        :type: str
        """

        self._report_description = report_description

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, AnalysisSummary):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
