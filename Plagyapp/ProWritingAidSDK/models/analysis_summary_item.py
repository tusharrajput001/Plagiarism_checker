# coding: utf-8

"""
    ProWritingAid API V2

    Official ProWritingAid API Version 2

    OpenAPI spec version: v2
    Contact: hello@prowritingaid.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class AnalysisSummaryItem(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'text': 'str',
        'graph': 'AnalysisSummaryGraph',
        'url': 'str',
        'url_text': 'str',
        'sub_items': 'list[AnalysisSummarySubItem]',
        'is_positive': 'str',
        'category': 'SuggestionCategory',
        'category_name': 'str',
        'num_issues': 'int'
    }

    attribute_map = {
        'text': 'Text',
        'graph': 'Graph',
        'url': 'Url',
        'url_text': 'UrlText',
        'sub_items': 'SubItems',
        'is_positive': 'IsPositive',
        'category': 'Category',
        'category_name': 'CategoryName',
        'num_issues': 'NumIssues'
    }

    def __init__(self, text=None, graph=None, url=None, url_text=None, sub_items=None, is_positive=None, category=None, category_name=None, num_issues=None):
        """
        AnalysisSummaryItem - a model defined in Swagger
        """

        self._text = None
        self._graph = None
        self._url = None
        self._url_text = None
        self._sub_items = None
        self._is_positive = None
        self._category = None
        self._category_name = None
        self._num_issues = None

        if text is not None:
          self.text = text
        if graph is not None:
          self.graph = graph
        if url is not None:
          self.url = url
        if url_text is not None:
          self.url_text = url_text
        if sub_items is not None:
          self.sub_items = sub_items
        if is_positive is not None:
          self.is_positive = is_positive
        if category is not None:
          self.category = category
        if category_name is not None:
          self.category_name = category_name
        if num_issues is not None:
          self.num_issues = num_issues

    @property
    def text(self):
        """
        Gets the text of this AnalysisSummaryItem.

        :return: The text of this AnalysisSummaryItem.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """
        Sets the text of this AnalysisSummaryItem.

        :param text: The text of this AnalysisSummaryItem.
        :type: str
        """

        self._text = text

    @property
    def graph(self):
        """
        Gets the graph of this AnalysisSummaryItem.

        :return: The graph of this AnalysisSummaryItem.
        :rtype: AnalysisSummaryGraph
        """
        return self._graph

    @graph.setter
    def graph(self, graph):
        """
        Sets the graph of this AnalysisSummaryItem.

        :param graph: The graph of this AnalysisSummaryItem.
        :type: AnalysisSummaryGraph
        """

        self._graph = graph

    @property
    def url(self):
        """
        Gets the url of this AnalysisSummaryItem.

        :return: The url of this AnalysisSummaryItem.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """
        Sets the url of this AnalysisSummaryItem.

        :param url: The url of this AnalysisSummaryItem.
        :type: str
        """

        self._url = url

    @property
    def url_text(self):
        """
        Gets the url_text of this AnalysisSummaryItem.

        :return: The url_text of this AnalysisSummaryItem.
        :rtype: str
        """
        return self._url_text

    @url_text.setter
    def url_text(self, url_text):
        """
        Sets the url_text of this AnalysisSummaryItem.

        :param url_text: The url_text of this AnalysisSummaryItem.
        :type: str
        """

        self._url_text = url_text

    @property
    def sub_items(self):
        """
        Gets the sub_items of this AnalysisSummaryItem.

        :return: The sub_items of this AnalysisSummaryItem.
        :rtype: list[AnalysisSummarySubItem]
        """
        return self._sub_items

    @sub_items.setter
    def sub_items(self, sub_items):
        """
        Sets the sub_items of this AnalysisSummaryItem.

        :param sub_items: The sub_items of this AnalysisSummaryItem.
        :type: list[AnalysisSummarySubItem]
        """

        self._sub_items = sub_items

    @property
    def is_positive(self):
        """
        Gets the is_positive of this AnalysisSummaryItem.

        :return: The is_positive of this AnalysisSummaryItem.
        :rtype: str
        """
        return self._is_positive

    @is_positive.setter
    def is_positive(self, is_positive):
        """
        Sets the is_positive of this AnalysisSummaryItem.

        :param is_positive: The is_positive of this AnalysisSummaryItem.
        :type: str
        """
        allowed_values = ["Positive", "Negative", "Information"]
        if is_positive not in allowed_values:
            raise ValueError(
                "Invalid value for `is_positive` ({0}), must be one of {1}"
                .format(is_positive, allowed_values)
            )

        self._is_positive = is_positive

    @property
    def category(self):
        """
        Gets the category of this AnalysisSummaryItem.

        :return: The category of this AnalysisSummaryItem.
        :rtype: SuggestionCategory
        """
        return self._category

    @category.setter
    def category(self, category):
        """
        Sets the category of this AnalysisSummaryItem.

        :param category: The category of this AnalysisSummaryItem.
        :type: SuggestionCategory
        """

        self._category = category

    @property
    def category_name(self):
        """
        Gets the category_name of this AnalysisSummaryItem.

        :return: The category_name of this AnalysisSummaryItem.
        :rtype: str
        """
        return self._category_name

    @category_name.setter
    def category_name(self, category_name):
        """
        Sets the category_name of this AnalysisSummaryItem.

        :param category_name: The category_name of this AnalysisSummaryItem.
        :type: str
        """

        self._category_name = category_name

    @property
    def num_issues(self):
        """
        Gets the num_issues of this AnalysisSummaryItem.

        :return: The num_issues of this AnalysisSummaryItem.
        :rtype: int
        """
        return self._num_issues

    @num_issues.setter
    def num_issues(self, num_issues):
        """
        Sets the num_issues of this AnalysisSummaryItem.

        :param num_issues: The num_issues of this AnalysisSummaryItem.
        :type: int
        """

        self._num_issues = num_issues

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, AnalysisSummaryItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
