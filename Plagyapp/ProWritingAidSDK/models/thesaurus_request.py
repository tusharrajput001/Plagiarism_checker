# coding: utf-8

"""
    ProWritingAid API V2

    Official ProWritingAid API Version 2

    OpenAPI spec version: v2
    Contact: hello@prowritingaid.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ThesaurusRequest(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'word': 'str',
        'language': 'str'
    }

    attribute_map = {
        'word': 'Word',
        'language': 'Language'
    }

    def __init__(self, word=None, language='en'):
        """
        ThesaurusRequest - a model defined in Swagger
        """

        self._word = None
        self._language = None

        self.word = word
        self.language = language

    @property
    def word(self):
        """
        Gets the word of this ThesaurusRequest.
        the word for the thesaurus call

        :return: The word of this ThesaurusRequest.
        :rtype: str
        """
        return self._word

    @word.setter
    def word(self, word):
        """
        Sets the word of this ThesaurusRequest.
        the word for the thesaurus call

        :param word: The word of this ThesaurusRequest.
        :type: str
        """
        if word is None:
            raise ValueError("Invalid value for `word`, must not be `None`")

        self._word = word

    @property
    def language(self):
        """
        Gets the language of this ThesaurusRequest.
        the language used

        :return: The language of this ThesaurusRequest.
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """
        Sets the language of this ThesaurusRequest.
        the language used

        :param language: The language of this ThesaurusRequest.
        :type: str
        """
        if language is None:
            raise ValueError("Invalid value for `language`, must not be `None`")
        allowed_values = ["en_US", "en_UK", "en", "es"]
        if language not in allowed_values:
            raise ValueError(
                "Invalid value for `language` ({0}), must be one of {1}"
                .format(language, allowed_values)
            )

        self._language = language

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ThesaurusRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
