# coding: utf-8

"""
    ProWritingAid API V2

    Official ProWritingAid API Version 2

    OpenAPI spec version: v2
    Contact: hello@prowritingaid.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class DocTag(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'start_pos': 'int',
        'end_pos': 'int',
        'report': 'str',
        'urls': 'list[str]',
        'category': 'str',
        'category_display_name': 'str',
        'subcategory': 'str',
        'hint': 'str',
        'suggestions': 'list[str]',
        'is_sub_tag': 'bool',
        'help_id': 'str',
        'id': 'str',
        'invisible': 'bool'
    }

    attribute_map = {
        'start_pos': 'startPos',
        'end_pos': 'endPos',
        'report': 'report',
        'urls': 'urls',
        'category': 'category',
        'category_display_name': 'categoryDisplayName',
        'subcategory': 'subcategory',
        'hint': 'hint',
        'suggestions': 'suggestions',
        'is_sub_tag': 'isSubTag',
        'help_id': 'helpId',
        'id': 'id',
        'invisible': 'invisible'
    }

    def __init__(self, start_pos=None, end_pos=None, report=None, urls=None, category=None, category_display_name=None, subcategory=None, hint=None, suggestions=None, is_sub_tag=None, help_id=None, id=None, invisible=None):
        """
        DocTag - a model defined in Swagger
        """

        self._start_pos = None
        self._end_pos = None
        self._report = None
        self._urls = None
        self._category = None
        self._category_display_name = None
        self._subcategory = None
        self._hint = None
        self._suggestions = None
        self._is_sub_tag = None
        self._help_id = None
        self._id = None
        self._invisible = None

        self.start_pos = start_pos
        self.end_pos = end_pos
        if report is not None:
          self.report = report
        if urls is not None:
          self.urls = urls
        if category is not None:
          self.category = category
        if category_display_name is not None:
          self.category_display_name = category_display_name
        if subcategory is not None:
          self.subcategory = subcategory
        if hint is not None:
          self.hint = hint
        if suggestions is not None:
          self.suggestions = suggestions
        self.is_sub_tag = is_sub_tag
        if help_id is not None:
          self.help_id = help_id
        if id is not None:
          self.id = id
        if invisible is not None:
          self.invisible = invisible

    @property
    def start_pos(self):
        """
        Gets the start_pos of this DocTag.
        The start position of the suggestion. 0 based

        :return: The start_pos of this DocTag.
        :rtype: int
        """
        return self._start_pos

    @start_pos.setter
    def start_pos(self, start_pos):
        """
        Sets the start_pos of this DocTag.
        The start position of the suggestion. 0 based

        :param start_pos: The start_pos of this DocTag.
        :type: int
        """
        if start_pos is None:
            raise ValueError("Invalid value for `start_pos`, must not be `None`")

        self._start_pos = start_pos

    @property
    def end_pos(self):
        """
        Gets the end_pos of this DocTag.
        The end position of the suggestion. 0 based

        :return: The end_pos of this DocTag.
        :rtype: int
        """
        return self._end_pos

    @end_pos.setter
    def end_pos(self, end_pos):
        """
        Sets the end_pos of this DocTag.
        The end position of the suggestion. 0 based

        :param end_pos: The end_pos of this DocTag.
        :type: int
        """
        if end_pos is None:
            raise ValueError("Invalid value for `end_pos`, must not be `None`")

        self._end_pos = end_pos

    @property
    def report(self):
        """
        Gets the report of this DocTag.
        Report Id

        :return: The report of this DocTag.
        :rtype: str
        """
        return self._report

    @report.setter
    def report(self, report):
        """
        Sets the report of this DocTag.
        Report Id

        :param report: The report of this DocTag.
        :type: str
        """

        self._report = report

    @property
    def urls(self):
        """
        Gets the urls of this DocTag.
        List of source documents found by plagiarism checker

        :return: The urls of this DocTag.
        :rtype: list[str]
        """
        return self._urls

    @urls.setter
    def urls(self, urls):
        """
        Sets the urls of this DocTag.
        List of source documents found by plagiarism checker

        :param urls: The urls of this DocTag.
        :type: list[str]
        """

        self._urls = urls

    @property
    def category(self):
        """
        Gets the category of this DocTag.
        Suggestion's category

        :return: The category of this DocTag.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """
        Sets the category of this DocTag.
        Suggestion's category

        :param category: The category of this DocTag.
        :type: str
        """

        self._category = category

    @property
    def category_display_name(self):
        """
        Gets the category_display_name of this DocTag.
        Suggetsion's category display name

        :return: The category_display_name of this DocTag.
        :rtype: str
        """
        return self._category_display_name

    @category_display_name.setter
    def category_display_name(self, category_display_name):
        """
        Sets the category_display_name of this DocTag.
        Suggetsion's category display name

        :param category_display_name: The category_display_name of this DocTag.
        :type: str
        """

        self._category_display_name = category_display_name

    @property
    def subcategory(self):
        """
        Gets the subcategory of this DocTag.
        Suggestion's subcategory

        :return: The subcategory of this DocTag.
        :rtype: str
        """
        return self._subcategory

    @subcategory.setter
    def subcategory(self, subcategory):
        """
        Sets the subcategory of this DocTag.
        Suggestion's subcategory

        :param subcategory: The subcategory of this DocTag.
        :type: str
        """

        self._subcategory = subcategory

    @property
    def hint(self):
        """
        Gets the hint of this DocTag.
        Short suggestion's description

        :return: The hint of this DocTag.
        :rtype: str
        """
        return self._hint

    @hint.setter
    def hint(self, hint):
        """
        Sets the hint of this DocTag.
        Short suggestion's description

        :param hint: The hint of this DocTag.
        :type: str
        """

        self._hint = hint

    @property
    def suggestions(self):
        """
        Gets the suggestions of this DocTag.
        List of possible replacements

        :return: The suggestions of this DocTag.
        :rtype: list[str]
        """
        return self._suggestions

    @suggestions.setter
    def suggestions(self, suggestions):
        """
        Sets the suggestions of this DocTag.
        List of possible replacements

        :param suggestions: The suggestions of this DocTag.
        :type: list[str]
        """

        self._suggestions = suggestions

    @property
    def is_sub_tag(self):
        """
        Gets the is_sub_tag of this DocTag.
        Identifies that this suggestion is a part of larger one

        :return: The is_sub_tag of this DocTag.
        :rtype: bool
        """
        return self._is_sub_tag

    @is_sub_tag.setter
    def is_sub_tag(self, is_sub_tag):
        """
        Sets the is_sub_tag of this DocTag.
        Identifies that this suggestion is a part of larger one

        :param is_sub_tag: The is_sub_tag of this DocTag.
        :type: bool
        """
        if is_sub_tag is None:
            raise ValueError("Invalid value for `is_sub_tag`, must not be `None`")

        self._is_sub_tag = is_sub_tag

    @property
    def help_id(self):
        """
        Gets the help_id of this DocTag.
        TODO DOCS

        :return: The help_id of this DocTag.
        :rtype: str
        """
        return self._help_id

    @help_id.setter
    def help_id(self, help_id):
        """
        Sets the help_id of this DocTag.
        TODO DOCS

        :param help_id: The help_id of this DocTag.
        :type: str
        """

        self._help_id = help_id

    @property
    def id(self):
        """
        Gets the id of this DocTag.
        Suggestion's Id

        :return: The id of this DocTag.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this DocTag.
        Suggestion's Id

        :param id: The id of this DocTag.
        :type: str
        """

        self._id = id

    @property
    def invisible(self):
        """
        Gets the invisible of this DocTag.
        Is tag invisible?

        :return: The invisible of this DocTag.
        :rtype: bool
        """
        return self._invisible

    @invisible.setter
    def invisible(self, invisible):
        """
        Sets the invisible of this DocTag.
        Is tag invisible?

        :param invisible: The invisible of this DocTag.
        :type: bool
        """

        self._invisible = invisible

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, DocTag):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
