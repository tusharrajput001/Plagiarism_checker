# coding: utf-8

"""
    ProWritingAid API V2

    Official ProWritingAid API Version 2

    OpenAPI spec version: v2
    Contact: hello@prowritingaid.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class TextAnalysisResponse(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'tags': 'list[DocTag]',
        'word_count': 'int',
        'summaries': 'list[AnalysisSummary]'
    }

    attribute_map = {
        'tags': 'Tags',
        'word_count': 'WordCount',
        'summaries': 'Summaries'
    }

    def __init__(self, tags=None, word_count=None, summaries=None):
        """
        TextAnalysisResponse - a model defined in Swagger
        """

        self._tags = None
        self._word_count = None
        self._summaries = None

        self.tags = tags
        self.word_count = word_count
        self.summaries = summaries

    @property
    def tags(self):
        """
        Gets the tags of this TextAnalysisResponse.
        List of found suggestions

        :return: The tags of this TextAnalysisResponse.
        :rtype: list[DocTag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """
        Sets the tags of this TextAnalysisResponse.
        List of found suggestions

        :param tags: The tags of this TextAnalysisResponse.
        :type: list[DocTag]
        """
        if tags is None:
            raise ValueError("Invalid value for `tags`, must not be `None`")

        self._tags = tags

    @property
    def word_count(self):
        """
        Gets the word_count of this TextAnalysisResponse.
        Number of processed words

        :return: The word_count of this TextAnalysisResponse.
        :rtype: int
        """
        return self._word_count

    @word_count.setter
    def word_count(self, word_count):
        """
        Sets the word_count of this TextAnalysisResponse.
        Number of processed words

        :param word_count: The word_count of this TextAnalysisResponse.
        :type: int
        """
        if word_count is None:
            raise ValueError("Invalid value for `word_count`, must not be `None`")

        self._word_count = word_count

    @property
    def summaries(self):
        """
        Gets the summaries of this TextAnalysisResponse.
        

        :return: The summaries of this TextAnalysisResponse.
        :rtype: list[AnalysisSummary]
        """
        return self._summaries

    @summaries.setter
    def summaries(self, summaries):
        """
        Sets the summaries of this TextAnalysisResponse.
        

        :param summaries: The summaries of this TextAnalysisResponse.
        :type: list[AnalysisSummary]
        """
        if summaries is None:
            raise ValueError("Invalid value for `summaries`, must not be `None`")

        self._summaries = summaries

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, TextAnalysisResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
