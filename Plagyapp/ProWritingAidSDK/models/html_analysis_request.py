# coding: utf-8

"""
    ProWritingAid API V2

    Official ProWritingAid API Version 2

    OpenAPI spec version: v2
    Contact: hello@prowritingaid.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class HtmlAnalysisRequest(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'html': 'str',
        'reports': 'list[str]',
        'style': 'str',
        'language': 'str'
    }

    attribute_map = {
        'html': 'Html',
        'reports': 'Reports',
        'style': 'Style',
        'language': 'Language'
    }

    def __init__(self, html=None, reports=None, style='General', language='en'):
        """
        HtmlAnalysisRequest - a model defined in Swagger
        """

        self._html = None
        self._reports = None
        self._style = None
        self._language = None

        self.html = html
        self.reports = reports
        self.style = style
        self.language = language

    @property
    def html(self):
        """
        Gets the html of this HtmlAnalysisRequest.
        Html to be processed

        :return: The html of this HtmlAnalysisRequest.
        :rtype: str
        """
        return self._html

    @html.setter
    def html(self, html):
        """
        Sets the html of this HtmlAnalysisRequest.
        Html to be processed

        :param html: The html of this HtmlAnalysisRequest.
        :type: str
        """
        if html is None:
            raise ValueError("Invalid value for `html`, must not be `None`")

        self._html = html

    @property
    def reports(self):
        """
        Gets the reports of this HtmlAnalysisRequest.
        List of reports - EXAMPLE: [\"grammar\",\"overused\"]

        :return: The reports of this HtmlAnalysisRequest.
        :rtype: list[str]
        """
        return self._reports

    @reports.setter
    def reports(self, reports):
        """
        Sets the reports of this HtmlAnalysisRequest.
        List of reports - EXAMPLE: [\"grammar\",\"overused\"]

        :param reports: The reports of this HtmlAnalysisRequest.
        :type: list[str]
        """
        if reports is None:
            raise ValueError("Invalid value for `reports`, must not be `None`")

        self._reports = reports

    @property
    def style(self):
        """
        Gets the style of this HtmlAnalysisRequest.
        Document's writing style

        :return: The style of this HtmlAnalysisRequest.
        :rtype: str
        """
        return self._style

    @style.setter
    def style(self, style):
        """
        Sets the style of this HtmlAnalysisRequest.
        Document's writing style

        :param style: The style of this HtmlAnalysisRequest.
        :type: str
        """
        if style is None:
            raise ValueError("Invalid value for `style`, must not be `None`")
        allowed_values = ["NotSet", "General", "Academic", "Business", "Technical", "Creative", "Casual", "Web"]
        if style not in allowed_values:
            raise ValueError(
                "Invalid value for `style` ({0}), must be one of {1}"
                .format(style, allowed_values)
            )

        self._style = style

    @property
    def language(self):
        """
        Gets the language of this HtmlAnalysisRequest.
        Document's language. Set correct UK/US language to get region-specific suggestions

        :return: The language of this HtmlAnalysisRequest.
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """
        Sets the language of this HtmlAnalysisRequest.
        Document's language. Set correct UK/US language to get region-specific suggestions

        :param language: The language of this HtmlAnalysisRequest.
        :type: str
        """
        if language is None:
            raise ValueError("Invalid value for `language`, must not be `None`")
        allowed_values = ["en_US", "en_UK", "en", "es"]
        if language not in allowed_values:
            raise ValueError(
                "Invalid value for `language` ({0}), must be one of {1}"
                .format(language, allowed_values)
            )

        self._language = language

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, HtmlAnalysisRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
