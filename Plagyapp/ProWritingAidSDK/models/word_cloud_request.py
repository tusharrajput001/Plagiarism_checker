# coding: utf-8

"""
    ProWritingAid API V2

    Official ProWritingAid API Version 2

    OpenAPI spec version: v2
    Contact: hello@prowritingaid.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class WordCloudRequest(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'text': 'str',
        'orientation': 'str',
        'case_method': 'str',
        'palette_name': 'str',
        'maximum_word_count': 'int',
        'remove_common_words': 'bool',
        'font_name': 'str',
        'width': 'int',
        'height': 'int',
        'only_sentiment_words': 'bool',
        'style': 'str',
        'language': 'str'
    }

    attribute_map = {
        'text': 'Text',
        'orientation': 'Orientation',
        'case_method': 'CaseMethod',
        'palette_name': 'PaletteName',
        'maximum_word_count': 'MaximumWordCount',
        'remove_common_words': 'RemoveCommonWords',
        'font_name': 'FontName',
        'width': 'Width',
        'height': 'Height',
        'only_sentiment_words': 'OnlySentimentWords',
        'style': 'Style',
        'language': 'Language'
    }

    def __init__(self, text=None, orientation='EveryWhichWay', case_method='IntelligentCase', palette_name='ProWritingAid', maximum_word_count=100, remove_common_words=True, font_name='Arial', width=200, height=200, only_sentiment_words=False, style='General', language='en'):
        """
        WordCloudRequest - a model defined in Swagger
        """

        self._text = None
        self._orientation = None
        self._case_method = None
        self._palette_name = None
        self._maximum_word_count = None
        self._remove_common_words = None
        self._font_name = None
        self._width = None
        self._height = None
        self._only_sentiment_words = None
        self._style = None
        self._language = None

        self.text = text
        self.orientation = orientation
        self.case_method = case_method
        self.palette_name = palette_name
        self.maximum_word_count = maximum_word_count
        self.remove_common_words = remove_common_words
        self.font_name = font_name
        self.width = width
        self.height = height
        self.only_sentiment_words = only_sentiment_words
        self.style = style
        self.language = language

    @property
    def text(self):
        """
        Gets the text of this WordCloudRequest.
        The text to be turned into a Word Cloud

        :return: The text of this WordCloudRequest.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """
        Sets the text of this WordCloudRequest.
        The text to be turned into a Word Cloud

        :param text: The text of this WordCloudRequest.
        :type: str
        """
        if text is None:
            raise ValueError("Invalid value for `text`, must not be `None`")

        self._text = text

    @property
    def orientation(self):
        """
        Gets the orientation of this WordCloudRequest.
        The orientation of the text

        :return: The orientation of this WordCloudRequest.
        :rtype: str
        """
        return self._orientation

    @orientation.setter
    def orientation(self, orientation):
        """
        Sets the orientation of this WordCloudRequest.
        The orientation of the text

        :param orientation: The orientation of this WordCloudRequest.
        :type: str
        """
        if orientation is None:
            raise ValueError("Invalid value for `orientation`, must not be `None`")
        allowed_values = ["Horizontal", "MostlyHorizontal", "Vertical", "MostlyVertical", "HalfAndHalf", "EveryWhichWay"]
        if orientation not in allowed_values:
            raise ValueError(
                "Invalid value for `orientation` ({0}), must be one of {1}"
                .format(orientation, allowed_values)
            )

        self._orientation = orientation

    @property
    def case_method(self):
        """
        Gets the case_method of this WordCloudRequest.
        The method to be used for casing

        :return: The case_method of this WordCloudRequest.
        :rtype: str
        """
        return self._case_method

    @case_method.setter
    def case_method(self, case_method):
        """
        Sets the case_method of this WordCloudRequest.
        The method to be used for casing

        :param case_method: The case_method of this WordCloudRequest.
        :type: str
        """
        if case_method is None:
            raise ValueError("Invalid value for `case_method`, must not be `None`")
        allowed_values = ["PreserveCase", "Lowercase", "Uppercase", "IntelligentCase"]
        if case_method not in allowed_values:
            raise ValueError(
                "Invalid value for `case_method` ({0}), must be one of {1}"
                .format(case_method, allowed_values)
            )

        self._case_method = case_method

    @property
    def palette_name(self):
        """
        Gets the palette_name of this WordCloudRequest.
        The name of the palette

        :return: The palette_name of this WordCloudRequest.
        :rtype: str
        """
        return self._palette_name

    @palette_name.setter
    def palette_name(self, palette_name):
        """
        Sets the palette_name of this WordCloudRequest.
        The name of the palette

        :param palette_name: The palette_name of this WordCloudRequest.
        :type: str
        """
        if palette_name is None:
            raise ValueError("Invalid value for `palette_name`, must not be `None`")

        self._palette_name = palette_name

    @property
    def maximum_word_count(self):
        """
        Gets the maximum_word_count of this WordCloudRequest.
        the maximum number of words to be created

        :return: The maximum_word_count of this WordCloudRequest.
        :rtype: int
        """
        return self._maximum_word_count

    @maximum_word_count.setter
    def maximum_word_count(self, maximum_word_count):
        """
        Sets the maximum_word_count of this WordCloudRequest.
        the maximum number of words to be created

        :param maximum_word_count: The maximum_word_count of this WordCloudRequest.
        :type: int
        """
        if maximum_word_count is None:
            raise ValueError("Invalid value for `maximum_word_count`, must not be `None`")

        self._maximum_word_count = maximum_word_count

    @property
    def remove_common_words(self):
        """
        Gets the remove_common_words of this WordCloudRequest.
        Should Common words be removed from the cloud

        :return: The remove_common_words of this WordCloudRequest.
        :rtype: bool
        """
        return self._remove_common_words

    @remove_common_words.setter
    def remove_common_words(self, remove_common_words):
        """
        Sets the remove_common_words of this WordCloudRequest.
        Should Common words be removed from the cloud

        :param remove_common_words: The remove_common_words of this WordCloudRequest.
        :type: bool
        """
        if remove_common_words is None:
            raise ValueError("Invalid value for `remove_common_words`, must not be `None`")

        self._remove_common_words = remove_common_words

    @property
    def font_name(self):
        """
        Gets the font_name of this WordCloudRequest.
        The name of the font to use

        :return: The font_name of this WordCloudRequest.
        :rtype: str
        """
        return self._font_name

    @font_name.setter
    def font_name(self, font_name):
        """
        Sets the font_name of this WordCloudRequest.
        The name of the font to use

        :param font_name: The font_name of this WordCloudRequest.
        :type: str
        """
        if font_name is None:
            raise ValueError("Invalid value for `font_name`, must not be `None`")

        self._font_name = font_name

    @property
    def width(self):
        """
        Gets the width of this WordCloudRequest.
        The width of the image to produce

        :return: The width of this WordCloudRequest.
        :rtype: int
        """
        return self._width

    @width.setter
    def width(self, width):
        """
        Sets the width of this WordCloudRequest.
        The width of the image to produce

        :param width: The width of this WordCloudRequest.
        :type: int
        """
        if width is None:
            raise ValueError("Invalid value for `width`, must not be `None`")

        self._width = width

    @property
    def height(self):
        """
        Gets the height of this WordCloudRequest.
        The height of the image to produce

        :return: The height of this WordCloudRequest.
        :rtype: int
        """
        return self._height

    @height.setter
    def height(self, height):
        """
        Sets the height of this WordCloudRequest.
        The height of the image to produce

        :param height: The height of this WordCloudRequest.
        :type: int
        """
        if height is None:
            raise ValueError("Invalid value for `height`, must not be `None`")

        self._height = height

    @property
    def only_sentiment_words(self):
        """
        Gets the only_sentiment_words of this WordCloudRequest.
        Only use the sentiment words from the text

        :return: The only_sentiment_words of this WordCloudRequest.
        :rtype: bool
        """
        return self._only_sentiment_words

    @only_sentiment_words.setter
    def only_sentiment_words(self, only_sentiment_words):
        """
        Sets the only_sentiment_words of this WordCloudRequest.
        Only use the sentiment words from the text

        :param only_sentiment_words: The only_sentiment_words of this WordCloudRequest.
        :type: bool
        """
        if only_sentiment_words is None:
            raise ValueError("Invalid value for `only_sentiment_words`, must not be `None`")

        self._only_sentiment_words = only_sentiment_words

    @property
    def style(self):
        """
        Gets the style of this WordCloudRequest.
        Document's writing style

        :return: The style of this WordCloudRequest.
        :rtype: str
        """
        return self._style

    @style.setter
    def style(self, style):
        """
        Sets the style of this WordCloudRequest.
        Document's writing style

        :param style: The style of this WordCloudRequest.
        :type: str
        """
        if style is None:
            raise ValueError("Invalid value for `style`, must not be `None`")
        allowed_values = ["NotSet", "General", "Academic", "Business", "Technical", "Creative", "Casual", "Web"]
        if style not in allowed_values:
            raise ValueError(
                "Invalid value for `style` ({0}), must be one of {1}"
                .format(style, allowed_values)
            )

        self._style = style

    @property
    def language(self):
        """
        Gets the language of this WordCloudRequest.
        Document's language. Set correct UK/US language to get region-specific suggestions

        :return: The language of this WordCloudRequest.
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """
        Sets the language of this WordCloudRequest.
        Document's language. Set correct UK/US language to get region-specific suggestions

        :param language: The language of this WordCloudRequest.
        :type: str
        """
        if language is None:
            raise ValueError("Invalid value for `language`, must not be `None`")
        allowed_values = ["en_US", "en_UK", "en", "es"]
        if language not in allowed_values:
            raise ValueError(
                "Invalid value for `language` ({0}), must be one of {1}"
                .format(language, allowed_values)
            )

        self._language = language

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, WordCloudRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
