# coding: utf-8

"""
    ProWritingAid API V2

    Official ProWritingAid API Version 2

    OpenAPI spec version: v2
    Contact: hello@prowritingaid.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class AnalysisSummaryGraphItem(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'label': 'str',
        'color': 'str',
        'length': 'int',
        'sub_category': 'str',
        'index': 'int',
        'id': 'str'
    }

    attribute_map = {
        'label': 'Label',
        'color': 'Color',
        'length': 'Length',
        'sub_category': 'SubCategory',
        'index': 'Index',
        'id': 'Id'
    }

    def __init__(self, label=None, color=None, length=None, sub_category=None, index=None, id=None):
        """
        AnalysisSummaryGraphItem - a model defined in Swagger
        """

        self._label = None
        self._color = None
        self._length = None
        self._sub_category = None
        self._index = None
        self._id = None

        if label is not None:
          self.label = label
        if color is not None:
          self.color = color
        if length is not None:
          self.length = length
        if sub_category is not None:
          self.sub_category = sub_category
        if index is not None:
          self.index = index
        if id is not None:
          self.id = id

    @property
    def label(self):
        """
        Gets the label of this AnalysisSummaryGraphItem.

        :return: The label of this AnalysisSummaryGraphItem.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """
        Sets the label of this AnalysisSummaryGraphItem.

        :param label: The label of this AnalysisSummaryGraphItem.
        :type: str
        """

        self._label = label

    @property
    def color(self):
        """
        Gets the color of this AnalysisSummaryGraphItem.

        :return: The color of this AnalysisSummaryGraphItem.
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color):
        """
        Sets the color of this AnalysisSummaryGraphItem.

        :param color: The color of this AnalysisSummaryGraphItem.
        :type: str
        """

        self._color = color

    @property
    def length(self):
        """
        Gets the length of this AnalysisSummaryGraphItem.

        :return: The length of this AnalysisSummaryGraphItem.
        :rtype: int
        """
        return self._length

    @length.setter
    def length(self, length):
        """
        Sets the length of this AnalysisSummaryGraphItem.

        :param length: The length of this AnalysisSummaryGraphItem.
        :type: int
        """

        self._length = length

    @property
    def sub_category(self):
        """
        Gets the sub_category of this AnalysisSummaryGraphItem.

        :return: The sub_category of this AnalysisSummaryGraphItem.
        :rtype: str
        """
        return self._sub_category

    @sub_category.setter
    def sub_category(self, sub_category):
        """
        Sets the sub_category of this AnalysisSummaryGraphItem.

        :param sub_category: The sub_category of this AnalysisSummaryGraphItem.
        :type: str
        """

        self._sub_category = sub_category

    @property
    def index(self):
        """
        Gets the index of this AnalysisSummaryGraphItem.

        :return: The index of this AnalysisSummaryGraphItem.
        :rtype: int
        """
        return self._index

    @index.setter
    def index(self, index):
        """
        Sets the index of this AnalysisSummaryGraphItem.

        :param index: The index of this AnalysisSummaryGraphItem.
        :type: int
        """

        self._index = index

    @property
    def id(self):
        """
        Gets the id of this AnalysisSummaryGraphItem.

        :return: The id of this AnalysisSummaryGraphItem.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this AnalysisSummaryGraphItem.

        :param id: The id of this AnalysisSummaryGraphItem.
        :type: str
        """

        self._id = id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, AnalysisSummaryGraphItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
